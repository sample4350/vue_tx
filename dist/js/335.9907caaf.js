'use strict'; (self.webpackChunkv2 = self.webpackChunkv2 || []).push([[335], { 9335: function (e, t, s) { s.r(t), s.d(t, { default: function () { return m } }); const a = function () { const e = this; const t = e._self._c; return t('div', { attrs: { id: 'register' } }, [t('el-form', { ref: 'ruleForm', staticClass: 'registerForm', attrs: { model: e.registerForm, 'status-icon': '', rules: e.rules, 'label-width': '0px' } }, [t('el-form-item', { staticClass: 'title' }, [t('el-row', [t('el-col', { attrs: { span: 11 } }, [t('i', { staticClass: 'el-icon-back', on: { click: e.backFn } })]), t('el-col', { attrs: { span: 3 } }, [t('h3', [e._v('注册')])])], 1)], 1), t('el-form-item', { staticClass: 'nickName', attrs: { prop: 'nickname' } }, [t('el-input', { staticClass: 'input-1st', attrs: { type: 'text', autocomplete: 'off', placeholder: '昵称' }, model: { value: e.registerForm.nickname, callback: function (t) { e.$set(e.registerForm, 'nickname', t) }, expression: 'registerForm.nickname' } })], 1), t('el-form-item', { staticClass: 'upload' }, [t('span', [e._v('上传头像')]), t('el-upload', { staticClass: 'avatar-uploader', attrs: { action: 'https://jsonplaceholder.typicode.com/posts/', 'show-file-list': !1, 'on-success': e.handleAvatarSuccess, 'before-upload': e.beforeAvatarUpload } }, [e.imageUrl ? t('img', { staticClass: 'avatar', attrs: { src: e.imageUrl } }) : t('i', { staticClass: 'el-icon-plus avatar-uploader-icon' })]), t('span', [e._v('请上传大于1000*1000的图片')])], 1), t('el-form-item', { staticClass: 'email', attrs: { prop: 'mail' } }, [t('el-input', { attrs: { type: 'text', autocomplete: 'off', placeholder: '邮箱' }, model: { value: e.registerForm.mail, callback: function (t) { e.$set(e.registerForm, 'mail', t) }, expression: 'registerForm.mail' } })], 1), t('el-form-item', { staticClass: 'email', attrs: { prop: 'code' } }, [t('el-input', { staticClass: 'input-2st', attrs: { type: 'text', autocomplete: 'off', placeholder: '验证码' }, model: { value: e.registerForm.code, callback: function (t) { e.$set(e.registerForm, 'code', t) }, expression: 'registerForm.code' } }), t('el-button', { staticClass: 'check', attrs: { size: 'mini', type: 'primary' }, on: { click: e.sendCode } }, [e._v('发送验证码')])], 1), t('el-form-item', { staticClass: 'passwordSet', attrs: { prop: 'passwd' } }, [t('el-input', { attrs: { type: 'password', autocomplete: 'off', placeholder: '密码' }, model: { value: e.registerForm.passwd, callback: function (t) { e.$set(e.registerForm, 'passwd', t) }, expression: 'registerForm.passwd' } })], 1), t('el-form-item', { staticClass: 'commit' }, [t('el-button', { staticClass: 'btn', attrs: { size: 'mini', type: 'primary' }, on: { click: e.register } }, [e._v('提交')])], 1)], 1)], 1) }; const r = []; const o = s(8718); const i = { data () { return { registerForm: { mail: '', nickname: '', passwd: '', code: '' }, rules: { passwd: [{ trigger: 'blur', validator (e, t, s) { const a = /^\w{8,12}$/; !1 === a.test(t) && s(new Error('请输入8-12位的密码,且不能包含特殊字符')) } }], mail: [{ validator (e, t, s) { const a = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/; a.test(t) ? s() : s(t === '' ? new Error('请输入邮箱') : new Error('邮箱格式错误')) }, trigger: 'blur' }] }, imageUrl: '' } }, methods: { backFn () { this.$router.back() }, async sendCode () { const e = this.registerForm.mail; try { const t = await (0, o.ZY)(e); console.log(t), this.$message({ message: '验证码发送成功', type: 'success' }) } catch (t) { this.$message.error('验证码发送失败'), console.log(t) } }, async register () { const e = this.registerForm; try { const t = await (0, o.ds)(e); console.log(t) } catch (t) { console.log(t) } try { const t = await (0, o.aX)(e); console.log(t), this.$message({ message: '注册成功', type: 'success' }), this.$store.commit('setMail', e.mail), this.$store.commit('setNickName', e.nickname), this.$store.commit('setPasswd', e.passwd) } catch (t) { this.$message.error('注册失败'), console.log(t) } }, handleAvatarSuccess (e, t) { this.imageUrl = URL.createObjectURL(t.raw) }, beforeAvatarUpload (e) { const t = e.type === 'image/jpeg'; const s = e.size / 1024 / 1024 < 2; return t || this.$message.error('上传头像图片只能是 JPG 格式!'), s || this.$message.error('上传头像图片大小不能超过 2MB!'), t && s } } }; const l = i; const c = s(1001); const n = (0, c.Z)(l, a, r, !1, null, 'c1802a74', null); var m = n.exports } }])
// # sourceMappingURL=335.9907caaf.js.map
