'use strict'; (self.webpackChunkv2 = self.webpackChunkv2 || []).push([[2], { 6002: function (t, s, a) { a.r(s), a.d(s, { default: function () { return m } }); const e = function () { const t = this; const s = t._self._c; return s('div', { attrs: { id: 'my' } }, [s('el-form', { staticClass: 'myForm', attrs: { model: t.myForm } }, [s('el-form-item', { staticClass: 'title' }, [s('el-row', [s('el-col', { attrs: { span: 10 } }, [s('i', { staticClass: 'el-icon-back', on: { click: t.backFn } })]), s('el-col', { attrs: { span: 4 } }, [s('h3', [t._v('用户中心')])])], 1)], 1), s('el-form-item', { staticClass: 't1' }, [t._v('修改密码')]), s('el-form-item', { staticClass: 'modify' }, [s('el-input', { staticClass: 'input-1st', attrs: { type: 'password', placeholder: '新密码', pass: 'passwd' }, model: { value: t.myForm.passwd, callback: function (s) { t.$set(t.myForm, 'passwd', s) }, expression: 'myForm.passwd' } }), s('el-button', { staticClass: 'btn-1st', attrs: { type: 'primary', size: 'mini' }, on: { click: t.modifyPasswd } }, [t._v('提交')])], 1), s('el-form-item', { staticClass: 't1' }, [t._v('修改昵称')]), s('el-form-item', { staticClass: 'modify' }, [s('el-input', { staticClass: 'input-1st', attrs: { type: 'text', placeholder: '新昵称', pass: 'nickname' }, model: { value: t.myForm.nickname, callback: function (s) { t.$set(t.myForm, 'nickname', s) }, expression: 'myForm.nickname' } }), s('el-button', { staticClass: 'btn-1st', attrs: { type: 'primary', size: 'mini' }, on: { click: t.modifyNicName } }, [t._v('提交')])], 1), s('el-form-item', { staticClass: 'upload' }, [s('span', [t._v('修改头像')]), s('el-upload', { staticClass: 'avatar-uploader', attrs: { action: 'https://jsonplaceholder.typicode.com/posts/', 'show-file-list': !1, 'on-success': t.handleAvatarSuccess, 'before-upload': t.beforeAvatarUpload } }, [t.imageUrl ? s('img', { staticClass: 'avatar', attrs: { src: t.imageUrl } }) : s('i', { staticClass: 'el-icon-plus avatar-uploader-icon' })]), s('el-button', { staticClass: 'btn-1st', attrs: { type: 'primary', size: 'mini' } }, [t._v('提交')])], 1), s('el-form-item', { staticClass: 'exit' }, [s('el-button', { staticClass: 'exitBtn', attrs: { type: 'warning', size: 'mini' }, on: { click: t.toLogin } }, [t._v('退出登录')])], 1), s('el-form-item', { staticClass: 'exit' }, [s('el-button', { staticClass: 'exitBtn', attrs: { type: 'danger', size: 'mini' }, on: { click: t.delUser } }, [t._v('注销')])], 1)], 1)], 1) }; const i = []; const o = (a(7658), a(8718)); const l = { data () { return { myForm: { mail: this.$store.state.mail, passwd: '', nickname: '' }, imageUrl: '', localStorage: { mail: this.$store.state.mail, nickname: this.$store.state.nickname, passwd: this.$store.state.passwd } } }, methods: { async modifyPasswd () { try { const t = await (0, o.Ku)(this.myForm); console.log(t) } catch (t) { console.log(t) } }, async modifyNicName () { try { const t = await (0, o.i0)(this.myForm); console.log(t) } catch (t) { console.log(t) } }, async delUser () { try { const t = await (0, o.SI)(this.localStorage); console.log(t), this.$message({ message: '注销成功', type: 'success' }), this.$router.push({ path: '/' }) } catch (t) { console.log(t) } }, backFn () { this.$router.back() }, toLogin () { this.$router.push({ path: 'login' }), this.$message({ message: '退出成功', type: 'success' }) }, handleAvatarSuccess (t, s) { this.imageUrl = URL.createObjectURL(s.raw) }, beforeAvatarUpload (t) { const s = t.type === 'image/jpeg'; const a = t.size / 1024 / 1024 < 2; return s || this.$message.error('上传头像图片只能是 JPG 格式!'), a || this.$message.error('上传头像图片大小不能超过 2MB!'), s && a } } }; const r = l; const c = a(1001); const n = (0, c.Z)(r, e, i, !1, null, '027ec26e', null); var m = n.exports } }])
// # sourceMappingURL=2.d18e513c.js.map
