'use strict'; (self.webpackChunkv2 = self.webpackChunkv2 || []).push([[395], { 6395: function (t, s, e) { e.r(s), e.d(s, { default: function () { return m } }); const a = function () { const t = this; const s = t._self._c; return s('div', { attrs: { id: 'login' } }, [s('el-form', { ref: 'ruleForm', staticClass: 'loginForm', attrs: { model: t.loginForm, 'status-icon': '', rules: t.rules, 'label-width': '0px' } }, [s('h3', [t._v('同城推荐')]), s('el-form-item', { staticClass: 'admin', attrs: { prop: 'mail' } }, [s('el-input', { attrs: { type: 'text', autocomplete: 'off', placeholder: '账号' }, model: { value: t.loginForm.mail, callback: function (s) { t.$set(t.loginForm, 'mail', s) }, expression: 'loginForm.mail' } })], 1), s('el-form-item', { staticClass: 'password', attrs: { prop: 'passwd' } }, [s('el-input', { attrs: { type: 'password', autocomplete: 'off', placeholder: '密码' }, model: { value: t.loginForm.passwd, callback: function (s) { t.$set(t.loginForm, 'passwd', s) }, expression: 'loginForm.passwd' } })], 1), s('el-form-item', { staticClass: 'checkbox', attrs: { prop: 'type' } }, [s('el-checkbox', { attrs: { label: '记住我', name: 'type' }, model: { value: t.check, callback: function (s) { t.check = s }, expression: 'check' } }), s('router-link', { staticClass: 'register', attrs: { to: '/register' } }, [t._v('注册账号')])], 1), s('el-form-item', { staticClass: 'login' }, [s('el-button', { staticClass: 'btn', attrs: { size: 'mini', type: 'primary' }, on: { click: t.login } }, [t._v('登录')])], 1)], 1)], 1) }; const o = []; const r = (e(7658), e(8718)); const i = { name: 'login', data () { return { loginForm: { mail: '', passwd: '' }, rules: { mail: [{ trigger: 'blur', validator (t, s, e) { const a = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/; a.test(s) ? e() : e(s === '' ? new Error('请输入邮箱') : new Error('邮箱格式错误')) } }], passwd: [{ trigger: 'blur', validator (t, s, e) { const a = /^\w{8,12}$/; !1 === a.test(s) && e(new Error('请输入8-12位的密码,且不能包含特殊字符')) } }] }, check: this.$store.state.check } }, methods: { async login () { try { const { data: t } = await (0, r.m3)(this.loginForm); if (t.data == null) return void this.$message.error('登陆失败'); this.$store.commit('setUser', t.data), this.$message({ message: '登录成功', type: 'success' }), this.$router.push({ path: '/map' }), this.$store.commit('setMail', this.loginForm.mail), this.$store.commit('setPasswd', this.loginForm.passwd) } catch (t) { this.$message.error('登陆失败'), console.log(t) } } }, mounted () { this.check && (this.loginForm.mail = this.$store.state.mail, this.loginForm.passwd = this.$store.state.passwd) }, watch: { check (t, s) { this.$store.commit('setSave', this.check) } } }; const l = i; const c = e(1001); const n = (0, c.Z)(l, a, o, !1, null, '60080d98', null); var m = n.exports } }])
// # sourceMappingURL=395.8c62398b.js.map
